default:
  image: zenthangplus/gcloud-sdk:1.0.0

cache:
  key: "$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME"
  paths:
    - /go/pkg/mod

variables:
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  GIT_SUBMODULE_STRATEGY: recursive
  SERVICE_PATH: /golib-sample
  SERVICE_BASE_NAME: golib-sample

stages:
  - verify
  - docker_build
  - deploy
  - tag
  - request deploy to production

.test:
  stage: verify
  allow_failure: false
  image: golang:1.19-alpine
  except:
    refs:
      - tags
  before_script:
    - apk update && apk add git build-base
    - export GOPRIVATE=gitlab.com
    - git config --global url."https://$GITLAB_USER:$GITLAB_ACCESS_TOKEN@gitlab.com/".insteadOf "https://gitlab.com/"

automation test:
  extends: .test
  services:
    - name: mysql:5.7
      alias: mysql
    - name: krisgeus/docker-kafka@sha256:15d4d3451ef3c106db75c65cfa3f4a667ee9a246ad7365e49cf6ff547165cfc5
      alias: kafka
    - name: redis:5.0.6
      alias: redis
  variables:
    MYSQL_DATABASE: sample_test
    MYSQL_ROOT_PASSWORD: secret
    APP_DATASOURCE_HOST: mysql
    APP_REDIS_HOST: redis
    APP_KAFKA_BOOTSTRAPSERVERS: kafka:9092
  script:
    - cd $CI_PROJECT_DIR/src/core && go test ./...
    - cd $CI_PROJECT_DIR/src/adapter && go test ./...
    - cd $CI_PROJECT_DIR/src/internal && go test ./...
    - cd $CI_PROJECT_DIR/src/public && go test ./...
    - cd $CI_PROJECT_DIR/src/worker && go test ./...
#
#.docker_image_build:
#  stage: docker_build
#  image: zenthangplus/gcloud-sdk:1.0.0
#  only:
#    refs:
#      - develop
#      - master
#      - feature/test-deploy-qc
#      - feature/test-deploy-uat
#  script:
#    - gcloud builds submit --project=gcp-project-sample --config=k8s/cloudbuild.yaml --substitutions=_IMAGE_NAME=${DOCKER_IMAGE_NAME},_IMAGE_TAG=${IMAGE_TAG},_BUILD_MODULE=${BUILD_MODULE},_BUILD_COMMIT_HASH=$CI_COMMIT_SHORT_SHA,_BUILD_TIME=$(date +"%s"),_DOCKER_FILE=${DOCKER_FILE},_GITLAB_USER=${GITLAB_USER},_GITLAB_ACCESS_TOKEN=${GITLAB_ACCESS_TOKEN}
#
#docker migration build:
#  extends: .docker_image_build
#  variables:
#    BUILD_MODULE: migration
#    DOCKER_FILE: docker/Dockerfile.migration
#    DOCKER_IMAGE_NAME: $SERVICE_BASE_NAME-migration
#
#docker internal API build:
#  extends: .docker_image_build
#  variables:
#    BUILD_MODULE: internal
#    DOCKER_FILE: docker/Dockerfile
#    DOCKER_IMAGE_NAME: $SERVICE_BASE_NAME-internal
#
#docker public API build:
#  extends: .docker_image_build
#  variables:
#    BUILD_MODULE: public
#    DOCKER_FILE: docker/Dockerfile
#    DOCKER_IMAGE_NAME: $SERVICE_BASE_NAME-public
#
#docker worker API build:
#  extends: .docker_image_build
#  variables:
#    BUILD_MODULE: worker
#    DOCKER_FILE: docker/Dockerfile
#    DOCKER_IMAGE_NAME: $SERVICE_BASE_NAME-worker
#
#.deploy_to_qc:
#  dependencies: [ ]
#  stage: deploy
#  only:
#    - feature/test-deploy-uat
#  variables:
#    NAMESPACE: qc
#    ENVIRONMENT: qc
#
#deploy migration to QC:
#  extends: .deploy_to_qc
#  when: manual
#  variables:
#    SERVICE_NAME: $SERVICE_BASE_NAME-migration
#    SERVICE_CONFIG_NAME: $SERVICE_BASE_NAME-migration
#    SERVICE_SECRET_NAME: $SERVICE_BASE_NAME-migration
#  script: |
#    cd k8s/migration && bash migrate.sh
#
#deploy internal API to QC:
#  extends: .deploy_to_qc
#  when: manual
#  variables:
#    HOST: golib-qc.int.sample.dev
#    SERVICE_NAME: $SERVICE_BASE_NAME-internal
#    SERVICE_CONFIG_NAME: $SERVICE_BASE_NAME-internal
#    SERVICE_SECRET_NAME: $SERVICE_BASE_NAME-internal
#  script: |
#    cd k8s/internal && bash deploy.sh
#
#deploy public API to QC:
#  extends: .deploy_to_qc
#  when: manual
#  variables:
#    HOST: golib-qc.sample.dev
#    SERVICE_NAME: $SERVICE_BASE_NAME-public
#    SERVICE_CONFIG_NAME: $SERVICE_BASE_NAME-public
#    SERVICE_SECRET_NAME: $SERVICE_BASE_NAME-public
#  script: |
#    cd k8s/public && bash deploy.sh
#
#deploy worker API to QC:
#  extends: .deploy_to_qc
#  when: manual
#  variables:
#    HOST: golib-qc.int.sample.dev
#    SERVICE_NAME: $SERVICE_BASE_NAME-worker
#    SERVICE_CONFIG_NAME: $SERVICE_BASE_NAME-worker
#    SERVICE_SECRET_NAME: $SERVICE_BASE_NAME-worker
#  script: |
#    cd k8s/worker && bash deploy.sh
